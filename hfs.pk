set_endian(ENDIAN_BIG);

var kHFSRootParentID            = 1,
    kHFSRootFolderID            = 2,
    kHFSExtentsFileID           = 3,
    kHFSCatalogFileID           = 4,
    kHFSBadBlockFileID          = 5,
    kHFSAllocationFileID        = 6,
    kHFSStartupFileID           = 7,
    kHFSAttributesFileID        = 8,
    kHFSRepairCatalogFileID     = 14,
    kHFSBogusExtentFileID       = 15,
    kHFSFirstUserCatalogNodeID  = 16;

type HFSCatalogNodeID =  struct uint<32> {
    uint<32> cnid;
    method _print = void:
      {
        var s = cnid == kHFSRootParentID ? "kHFSRootParentID"
            : cnid == kHFSRootFolderID ? "kHFSRootFolderID"
            : cnid == kHFSExtentsFileID ? "kHFSExtentsFileID"
            : cnid == kHFSCatalogFileID ? "kHFSCatalogFileID"
            : cnid == kHFSBadBlockFileID ? "kHFSBadBlockFileID"
            : cnid == kHFSAllocationFileID ? "kHFSAllocationFileID"
            : cnid == kHFSStartupFileID ? "kHFSStartupFileID"
            : cnid == kHFSAttributesFileID ? "kHFSAttributesFileID"
            : cnid == kHFSRepairCatalogFileID ? "kHFSRepairCatalogFileID"
            : cnid == kHFSBogusExtentFileID ? "kHFSBogusExtentFileID"
            : cnid == kHFSFirstUserCatalogNodeID ? "kHFSFirstUserCatalogNodeID"
            : "";
        if (s == "")
          printf("%i32d", cnid);
        else
            print "#<" + s + ">";
      }
  };

type HFSVolumeAttributes = struct uint<32> {
    uint<16> reserved;                 // Bits 31-16
    bit kHFSVolumeSoftwareLockBit;     // Bit 15
    uint<1> reserved2;                 // Bit 14
    bit kHFSVolumeJournaledBit;        // Bit 13
    bit kHFSCatalogNodeIDsReusedBit;   // Bit 12
    bit kHFSBootVolumeInconsistentBit; // Bit 11
    bit kHFSVolumeNoCacheRequiredBit;  // Bit 10
    bit kHFSVolumeSparedBlocksBit;     // Bit 9
    bit kHFSVolumeUnmountedBit;        // Bit 8
    bit kHFSVolumeHardwareLockBit;     // Bit 7
    uint<7> reserved3;                 // Bits 6-0
};

unit HFS_BlockSize = 4096 * 8;  // Units are sized in bits, not bytes
type HFS_Block = offset<uint<32>, HFS_BlockSize>;

type HFSPlusExtentDescriptor = struct {
    HFS_Block startBlock;
    HFS_Block blockCount;
};

type HFSPlusExtentRecord = struct {
    HFSPlusExtentDescriptor[8] records;
};

type HFSPlusForkData = struct {
    uint64 logicalSize;
    uint32 clumpSize;
    uint32 totalBlocks;
    HFSPlusExtentRecord extents;
};

type HFSPlusVolumeHeader = struct {
    uint<8>[2] signature == ['H', '+'];
    uint<16> version;
    HFSVolumeAttributes attributes;
    char[4] lastMountedVersion;
    uint<32> journalInfoBlock;

    uint<32> createDate;
    uint<32> modifyDate;
    uint<32> backupDate;
    uint<32> checkedDate;

    uint<32> fileCount;
    uint<32> folderCount;

    uint<32> blockSize;
    HFS_Block totalBlocks;
    HFS_Block freeBlocks;

    uint<32> nextAllocation;
    uint<32> rsrcClumpSize;
    uint<32> dataClumpSize;
    HFSCatalogNodeID nextCatalogID;

    uint<32> writeCount;
    uint<64> encodingsBitmap;

    uint<32>[8] finderInfo;

    HFSPlusForkData allocationFile;
    HFSPlusForkData extentsFile;
    HFSPlusForkData catalogFile;
    HFSPlusForkData attributesFile;
    HFSPlusForkData startupFile;
};

type HFSPlusVolume = struct {
    uint<8>[1024] reserved1;
    HFSPlusVolumeHeader header;
    // File storage for totalBlocks * blockSize  bytes
    // HFSPlusVolumeHeader alternateHeader;
    // uint<8>[512] reserved2;
};
